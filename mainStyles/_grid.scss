@use "sass:math";

$grid-columns: 12;
$grid-gaps: (
    '0': 0,
    '1': 10px,
    '2': 20px,
    '3': 30px
);
$layout-values: flex-start, flex-end, center, space-around, space-between;

//base layout classes
.container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
    box-sizing: border-box;
}

.row {
    display: flex;
    flex-flow: row wrap;
}

//justify classes
@each $val in $layout-values {
    .justify-#{$val} {
        justify-content: $val;
    }
}

//gap classes
@each $key, $val in $grid-gaps {
    .gap-#{$key} {
        margin-left: -$val;
        margin-right: -$val;
        & > * {
            padding: $val;
        }
    }
    
}

//col classes
/* Here  css rules (declaring selectors and styles) are used inside @include but what we've always been using 
mixin is to extend some styles inside selecter( see button.scss) but this is media queries mixin so it wraps around selectors */
@include xs {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-xs {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, 12);
        }
    }
}

@include sm {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-sm {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, 12);
        }
    }
}

@include md {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-md {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, 12);
        }
    }
}

@include lg {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-lg {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, 12);
        }
    }
}

@include xl {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-xl {
            box-sizing: border-box;
            flex-grow: 0;
            width: math.div($i * 100%, 12);
        }
    }
}